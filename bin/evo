#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + '/../lib' 
require 'rubygems'
require 'commander/import'
require 'evo'

program :version, Evo::VERSION
program :name, 'Evolution Content Management System'
program :description, 'This executable is designed to assist existing Evolution
    deployments, initialize new applications, install packages,
    and much more.'
    
def require_app
  load 'application.rb'
rescue LoadError
  say 'Current directory is not an evo application'
end

command :init do |c|
  c.syntax = 'evo init [options]'
  c.description = 'Initialize an application.'
  c.action do |args, options|
    dest = args.shift || '.'
    unless Dir[dest / '*'].empty?
      abort unless agree "`#{dest}' is not empty, continue? "
    end
    FileUtils.mkdir_p dest
    FileUtils.cp_r File.dirname(__FILE__) / :'..' / :templates / :default / '.', dest
    say "Evolution initialized at `#{dest}', to get started:"
    say "  - Edit config/environment.rb"
    say "  - Run `$ evo setup && ruby application.rb`"
  end
end

command :'package stats' do |c|
  c.syntax = 'evo package stats [options]'
  c.description = 'Display package statistics.'
  c.option '-d', '--dependencies', 'Display package dependencies'
  c.option '-p', '--permissions', 'Display package permissions'
  c.option '-f', '--files', 'Display package file stats'
  c.action do |args, options|
    require_app
    Evo::Package.instances.sort_by(&:weight).each do |package|
      say "%23s : %s" % [$terminal.color(package.name, :bold), package.path.sub(Evo.core_root, '<core>')]
      if options.files
        say "%15s : %d" % ['workers', package.files_in_directory(:workers).length]
        say "%15s : %d" % ['models', package.files_in_directory(:models).length]
        say "%15s : %d" % ['specs', package.files_in_directory(:specs).length]
        say "%15s : %d" % ['views', package.files_in_directory(:views).length]
      end
      if options.permissions
        package.permissions.each do |permission|
          say "                - #{permission}"
        end
      end
      if options.dependencies
        package.dependencies.each do |dependency|
          say "%15s : %s : %s" % [dependency['name'], dependency['version'], dependency['description']]
        end
      end
    end
  end
end

command :console do |c|
  c.syntax = 'evo console [options]'
  c.description = 'Start interactive evo shell.'
  c.action do |args, options|
    # TODO: finish
  end
end

command :setup do |c|
  c.syntax = 'evo setup [options]'
  c.description = 'Auto-migrates and seeds database.'
  c.action do |args, options|
    require_app
    Evo.setup! and say "Setup complete"
  end
end

command :'db migrate' do |c|
  c.syntax = 'evo db migrate [options]'
  c.description = 'Auto-migrate the database (destroys data).'
  c.action do |args, options|
    require_app
    DataMapper.auto_migrate! and say "Migrated database"
  end
end

command :'db upgrade' do |c|
  c.syntax = 'evo db upgrade [options]'
  c.description = 'Auto-upgrade the database (preserves data).'
  c.action do |args, options|
    require_app
    DataMapper.auto_upgrade! and say "Upgraded database"
  end
end